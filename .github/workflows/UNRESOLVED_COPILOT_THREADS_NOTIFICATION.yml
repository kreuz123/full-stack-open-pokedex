name: Notify PR Owner About Unresolved Copilot Threads

on:
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write

jobs:
  check-copilot-threads:
    runs-on: ubuntu-latest
    if: github.event.review.state == 'approved'
    steps:
      - name: Check if all reviewers approved and find unresolved Copilot threads
        id: check-status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            
            // Get all reviews for this PR
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: prNumber
            });
            
            // Get PR details to check requested reviewers
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });
            
            const requestedReviewers = pr.requested_reviewers.map(r => r.login);
            
            // Find latest review for each reviewer
            const latestReviews = {};
            reviews.forEach(review => {
              const reviewer = review.user.login;
              if (!reviewer.endsWith('[bot]')) {
                if (!latestReviews[reviewer] || review.submitted_at > latestReviews[reviewer].submitted_at) {
                  latestReviews[reviewer] = review;
                }
              }
            });
            
            // Check current status
            const approvedReviewers = Object.values(latestReviews)
              .filter(review => review.state === 'APPROVED');
            
            const hasChangesRequested = Object.values(latestReviews)
              .some(review => review.state === 'CHANGES_REQUESTED');
            
            const hasPendingReviewers = requestedReviewers.length > 0;
            
            // Check if all conditions are met for approval
            const allReviewersApproved = approvedReviewers.length > 0 && !hasChangesRequested && !hasPendingReviewers;
            
            console.log(`Approved reviewers: ${approvedReviewers.length}`);
            console.log(`Has changes requested: ${hasChangesRequested}`);
            console.log(`Has pending reviewers: ${hasPendingReviewers}`);
            console.log(`All reviewers approved: ${allReviewersApproved}`);
            
            if (!allReviewersApproved) {
              console.log('Not all reviewers have approved yet');
              return;
            }
            
            // Get review threads using GraphQL to check for unresolved Copilot threads
            const { repository } = await github.graphql(`
              query($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $number) {
                    reviewThreads(first: 100) {
                      nodes {
                        isResolved
                        comments(first: 1) {
                          nodes {
                            author { 
                              login 
                            }
                            body
                            url
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { owner, repo, number: prNumber });
            
            // Filter for unresolved Copilot threads
            const unresolvedCopilotThreads = repository.pullRequest.reviewThreads.nodes
              .filter(thread => {
                if (thread.isResolved) return false;
                
                const author = thread.comments.nodes[0]?.author;
                // Check if it's Copilot or GitHub bot
                return author && (
                  author.login === 'github-actions[bot]' ||
                  author.login.includes('copilot') ||
                  author.login === 'copilot'
                );
              });
            
            if (unresolvedCopilotThreads.length === 0) {
              console.log('No unresolved Copilot threads found');
              return;
            }
            
            // Create thread list for the comment
            const threadList = unresolvedCopilotThreads
              .map((thread, index) => {
                const preview = thread.comments.nodes[0].body.substring(0, 70);
                return `${index + 1}. [View thread](${thread.comments.nodes[0].url}) - ${preview}${preview.length >= 70 ? '...' : ''}`;
              })
              .join('\n');
            
            // Set outputs for the next step
            core.setOutput('hasUnresolvedCopilotThreads', 'true');
            core.setOutput('unresolvedCount', unresolvedCopilotThreads.length);
            core.setOutput('threadList', threadList);
            core.setOutput('prOwner', pr.user.login);
            
            console.log(`Found ${unresolvedCopilotThreads.length} unresolved Copilot threads`);

      - name: Comment on PR to notify owner
        if: steps.check-status.outputs.hasUnresolvedCopilotThreads == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            @${{ steps.check-status.outputs.prOwner }} All reviewers have approved this PR! ðŸŽ‰ 
            
            However, there are ${{ steps.check-status.outputs.unresolvedCount }} unresolved Copilot review thread(s) that need your attention. Please resolve these conversations.

            **Unresolved Copilot threads:**
            ${{ steps.check-status.outputs.threadList }}
