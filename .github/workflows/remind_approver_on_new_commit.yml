name: Remind Approver On New Commit

on:
  pull_request:
    types: [synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  remind-approver:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          # Fetch only the latest commit history to speed up the job
          fetch-depth: 1

      - name: Print raw API output for debugging
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          echo "--- Raw API Output (reviews) ---"
          gh api -H "Accept: application/vnd.github+json" "/repos/$REPO/pulls/$PR_NUMBER/reviews?per_page=100"
          echo "--- Raw API Output (timeline) ---"
          gh api -H "Accept: application/vnd.github+json" "/repos/$REPO/issues/$PR_NUMBER/timeline?per_page=100"
          echo "--- End of Raw API Output ---"

      - name: Find dismissed approver after last push and notify
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          set -euo pipefail

          # Step 1: Noise reduction â€” only remind if reviewDecision is still REQUIRED
          REVIEW_DECISION=$(gh pr view "$PR_NUMBER" -R "$REPO" --json reviewDecision -q .reviewDecision || echo "")
          if [ "$REVIEW_DECISION" != "REVIEW_REQUIRED" ]; then
            echo "PR reviewDecision=$REVIEW_DECISION; no reminder needed."
            exit 0
          fi

          # Step 2: Get the commit time of the last commit in the PR
          LAST_COMMIT_TIME=$(gh pr view "$PR_NUMBER" -R "$REPO" --json commits -q '.commits[-1].commit.committedDate' || echo "")
          if [ -z "$LAST_COMMIT_TIME" ] || [ "$LAST_COMMIT_TIME" = "null" ]; then
            echo "Cannot determine last commit time; skipping."
            exit 0
          fi
          echo "Last commit time: $LAST_COMMIT_TIME"

          # Step 3: Use the timeline API to detect review_dismissed events after the last commit
          TIMELINE_JSON=$(gh api -H "Accept: application/vnd.github+json" "/repos/$REPO/issues/$PR_NUMBER/timeline?per_page=100")

          DISMISSED_LOGIN=$(echo "$TIMELINE_JSON" | jq -r --arg t "$LAST_COMMIT_TIME" '
            [ .[]
              | select(.event == "review_dismissed")
              | select(.created_at > $t)
            ]
            | sort_by(.created_at)
            | last
            | .dismissed_review.user.login // empty
          ')

          if [ -z "$DISMISSED_LOGIN" ]; then
            echo "No review_dismissed event after last push; skipping."
            exit 0
          fi

          # Step 4: Skip if the dismissed reviewer is a bot
          if [[ "$DISMISSED_LOGIN" =~ \[bot\]$ ]]; then
            echo "Dismissed reviewer is a bot ($DISMISSED_LOGIN); skipping."
            exit 0
          fi

          # Step 5: Notify the dismissed reviewer with a PR comment
          echo "Notifying @$DISMISSED_LOGIN ..."
          gh pr comment "$PR_NUMBER" -R "$REPO" \
            --body "@$DISMISSED_LOGIN New commits have been pushed and your previous approval was dismissed. Please review again. $PR_URL"
